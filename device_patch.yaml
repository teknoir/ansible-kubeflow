apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: patch-device-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12, pipelines.kubeflow.org/pipeline_compilation_time: '2022-09-23T21:02:11.148696',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "A Kubeflow pipeline running
      Ansible playbook from a git repo on a subset of devices", "inputs": [{"name":
      "playbook_git_repo"}, {"name": "playbook_path"}, {"name": "ansible_limit"},
      {"default": "", "name": "add_device_label", "optional": true}], "name": "Patch
      device"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12}
spec:
  entrypoint: patch-device
  templates:
  - name: exit
    container:
      args: [teknoir-ai, teknoir, '{{workflow.status}}', /tmp/inputs/devices/data,
        /tmp/inputs/tunnels_created/data, /tmp/inputs/failed_devices/data, /tmp/inputs/successful_devices/data,
        '{{inputs.parameters.add_device_label}}']
      command:
      - bash
      - -c
      - |
        set -eo pipefail
        export NAMESPACE=$0
        export PROJECT_ID=$1

        echo "Status: $2"

        mapfile -t DEVICES < $3
        echo "Devices in play: $DEVICES"

        mapfile -t FAILED_DEVICES < $5
        echo "Failed Devices: $FAILED_DEVICES"

        mapfile -t SUCCESSFUL_DEVICES < $6
        echo "Successful Devices: $SUCCESSFUL_DEVICES"

        #mapfile -t TUNNELS_CREATED < $4
        #echo "Closing tunnels for: $TUNNELS_CREATED"
        #for DEVICE in $TUNNELS_CREATED ; do
        #  echo "Disabling reverse tunnel for: $DEVICE"
        #  NA_TUNNEL_PORT_B64=$(echo -ne "NA" | base64)
        #  kubectl patch device $DEVICE         #    --type merge         #    -p "{"spec":{"keys":{"data":{"tunnel":"$NA_TUNNEL_PORT_B64"}}}}"
        #done

        #if ! [[ -z "$7" ]] ; then
        #    for DEVICE in $SUCCESSFUL_DEVICES ; do
        #      echo "Adding label $7 to $DEVICE"
        #      # TODO: patch labels
        #      # kubectl patch device "{{ ansible_teknoir_device }}" --type merge -p "{"metadata":{"labels":{"$7[0]":"$7[1]"}}}"
        #    done
        #fi
      image: gcr.io/teknoir/edgebuild-kfp
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: add_device_label}
      artifacts:
      - {name: prepare-devices, path: /tmp/inputs/devices/data}
      - {name: run-failed_devices, path: /tmp/inputs/failed_devices/data}
      - {name: run-successful_devices, path: /tmp/inputs/successful_devices/data}
      - {name: prepare-tunnels_created, path: /tmp/inputs/tunnels_created/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Finally,
          run this to clean up", "implementation": {"container": {"args": [{"inputValue":
          "namespace"}, {"inputValue": "project_id"}, {"inputValue": "status"}, {"inputPath":
          "devices"}, {"inputPath": "tunnels_created"}, {"inputPath": "failed_devices"},
          {"inputPath": "successful_devices"}, {"inputValue": "add_device_label"}],
          "command": ["bash", "-c", "set -eo pipefail\nexport NAMESPACE=$0\nexport
          PROJECT_ID=$1\n\necho \"Status: $2\"\n\nmapfile -t DEVICES < $3\necho \"Devices
          in play: $DEVICES\"\n\nmapfile -t FAILED_DEVICES < $5\necho \"Failed Devices:
          $FAILED_DEVICES\"\n\nmapfile -t SUCCESSFUL_DEVICES < $6\necho \"Successful
          Devices: $SUCCESSFUL_DEVICES\"\n\n#mapfile -t TUNNELS_CREATED < $4\n#echo
          \"Closing tunnels for: $TUNNELS_CREATED\"\n#for DEVICE in $TUNNELS_CREATED
          ; do\n#  echo \"Disabling reverse tunnel for: $DEVICE\"\n#  NA_TUNNEL_PORT_B64=$(echo
          -ne \"NA\" | base64)\n#  kubectl patch device $DEVICE         #    --type
          merge         #    -p \"{\"spec\":{\"keys\":{\"data\":{\"tunnel\":\"$NA_TUNNEL_PORT_B64\"}}}}\"\n#done\n\n#if
          ! [[ -z \"$7\" ]] ; then\n#    for DEVICE in $SUCCESSFUL_DEVICES ; do\n#      echo
          \"Adding label $7 to $DEVICE\"\n#      # TODO: patch labels\n#      # kubectl
          patch device \"{{ ansible_teknoir_device }}\" --type merge -p \"{\"metadata\":{\"labels\":{\"$7[0]\":\"$7[1]\"}}}\"\n#    done\n#fi\n"],
          "image": "gcr.io/teknoir/edgebuild-kfp"}}, "inputs": [{"name": "status",
          "type": "String"}, {"name": "namespace", "type": "String"}, {"name": "project_id",
          "type": "String"}, {"name": "devices", "type": "Data"}, {"name": "tunnels_created",
          "type": "Data"}, {"name": "failed_devices", "type": "Data"}, {"name": "successful_devices",
          "type": "Data"}, {"name": "add_device_label", "type": "String"}], "name":
          "Exit"}', pipelines.kubeflow.org/component_ref: '{"digest": "ffde342314fa8148ab3e06c400e26300bb812ab69f5b00d372484f1308ef1834"}',
        pipelines.kubeflow.org/arguments.parameters: '{"add_device_label": "{{inputs.parameters.add_device_label}}",
          "namespace": "teknoir-ai", "project_id": "teknoir", "status": "{{workflow.status}}"}',
        pipelines.kubeflow.org/max_cache_staleness: P0D}
  - name: patch-device
    inputs:
      parameters:
      - {name: add_device_label}
      - {name: ansible_limit}
      - {name: playbook_git_repo}
      - {name: playbook_path}
    dag:
      tasks:
      - name: exit
        template: exit
        dependencies: [prepare, run]
        arguments:
          parameters:
          - {name: add_device_label, value: '{{inputs.parameters.add_device_label}}'}
          artifacts:
          - {name: prepare-devices, from: '{{tasks.prepare.outputs.artifacts.prepare-devices}}'}
          - {name: prepare-tunnels_created, from: '{{tasks.prepare.outputs.artifacts.prepare-tunnels_created}}'}
          - {name: run-failed_devices, from: '{{tasks.run.outputs.artifacts.run-failed_devices}}'}
          - {name: run-successful_devices, from: '{{tasks.run.outputs.artifacts.run-successful_devices}}'}
      - name: prepare
        template: prepare
        arguments:
          parameters:
          - {name: ansible_limit, value: '{{inputs.parameters.ansible_limit}}'}
          - {name: playbook_git_repo, value: '{{inputs.parameters.playbook_git_repo}}'}
      - name: run
        template: run
        dependencies: [prepare]
        arguments:
          parameters:
          - {name: ansible_limit, value: '{{inputs.parameters.ansible_limit}}'}
          - {name: playbook_path, value: '{{inputs.parameters.playbook_path}}'}
          - {name: prepare-access_token, value: '{{tasks.prepare.outputs.parameters.prepare-access_token}}'}
          artifacts:
          - {name: prepare-kube_config, from: '{{tasks.prepare.outputs.artifacts.prepare-kube_config}}'}
          - {name: prepare-playbook_dir, from: '{{tasks.prepare.outputs.artifacts.prepare-playbook_dir}}'}
          - {name: prepare-static_inventory, from: '{{tasks.prepare.outputs.artifacts.prepare-static_inventory}}'}
  - name: prepare
    container:
      args: [teknoir-ai, teknoir, /tmp/outputs/kube_config/data, '{{inputs.parameters.ansible_limit}}',
        '{{inputs.parameters.playbook_git_repo}}', /tmp/outputs/playbook_dir/data,
        /tmp/outputs/static_inventory/data, /tmp/outputs/access_token/data, /tmp/outputs/devices/data,
        /tmp/outputs/tunnels_created/data]
      command:
      - bash
      - -c
      - |
        set -eo pipefail
        export NAMESPACE=$0
        export PROJECT_ID=$1
        export KUBECONFIG=$2

        export CLUSTER=$(if [ "$PROJECT_ID" == "teknoir" ]; then echo "teknoir-cluster"; else echo "teknoir-dev-cluster"; fi)
        echo "Get credentials to $CLUSTER GKE cluster"
        gcloud container clusters get-credentials $CLUSTER --zone us-central1-c --project $PROJECT_ID
        echo "Kube config generated in $KUBECONFIG"

        echo "Clone git repo: $4"
        git clone $4 $5

        echo "Generate static inventory"
        /etc/ansible/inventory.py --yaml --output /inventory
        mkdir -p $6
        cp -rf /inventory/* $6

        mkdir -p $(dirname $7)
        gcloud auth application-default print-access-token > $7

        DEVICES=( $(ansible --list-hosts all --limit $3 | awk 'NR>1') )
        mkdir -p $(dirname $8)
        echo "${DEVICES[@]}" > $8

        #echo "Check reverse tunnels"
        #TUNNELS_CREATED=()
        #for DEVICE in $DEVICES ; do
        #  TUNNEL_PORT="$(kubectl get device $DEVICE -o jsonpath='{.spec.keys.data.tunnel}' | base64 -d)"
        #  RE='^[0-9]+$'
        #  if ! [[ $TUNNEL_PORT =~ $RE ]] ; then
        #    echo "Enabling reverse tunnel for: $DEVICE"
        #    TUNNEL_PORT="$(( ( RANDOM % 64511 )  + 1024 ))"
        #    TUNNEL_PORT_B64=$(echo -ne "$TUNNEL_PORT" | base64)
        #    kubectl patch device $DEVICE         #      --type merge         #      -p "{"spec":{"keys":{"data":{"tunnel":"$TUNNEL_PORT_B64"}}}}"
        #    TUNNELS_CREATED+=$DEVICE
        #  else
        #    echo "Reverse tunnel already enabled for: $DEVICE"
        #  fi
        #done

        #if (( ${#TUNNELS_CREATED[@]} )); then
        #    echo "Wait 2 minutes for reverse tunnels to warm up"
        #    sleep 2m
        #fi

        mkdir -p $(dirname $9)
        echo "${TUNNELS_CREATED[@]}" > $9
      image: gcr.io/teknoir/edgebuild-kfp
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: ansible_limit}
      - {name: playbook_git_repo}
    outputs:
      parameters:
      - name: prepare-access_token
        valueFrom: {path: /tmp/outputs/access_token/data}
      artifacts:
      - {name: prepare-access_token, path: /tmp/outputs/access_token/data}
      - {name: prepare-devices, path: /tmp/outputs/devices/data}
      - {name: prepare-kube_config, path: /tmp/outputs/kube_config/data}
      - {name: prepare-playbook_dir, path: /tmp/outputs/playbook_dir/data}
      - {name: prepare-static_inventory, path: /tmp/outputs/static_inventory/data}
      - {name: prepare-tunnels_created, path: /tmp/outputs/tunnels_created/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Preparations
          for a playbook", "implementation": {"container": {"args": [{"inputValue":
          "namespace"}, {"inputValue": "project_id"}, {"outputPath": "kube_config"},
          {"inputValue": "ansible_limit"}, {"inputValue": "playbook_git_repo"}, {"outputPath":
          "playbook_dir"}, {"outputPath": "static_inventory"}, {"outputPath": "access_token"},
          {"outputPath": "devices"}, {"outputPath": "tunnels_created"}], "command":
          ["bash", "-c", "set -eo pipefail\nexport NAMESPACE=$0\nexport PROJECT_ID=$1\nexport
          KUBECONFIG=$2\n\nexport CLUSTER=$(if [ \"$PROJECT_ID\" == \"teknoir\" ];
          then echo \"teknoir-cluster\"; else echo \"teknoir-dev-cluster\"; fi)\necho
          \"Get credentials to $CLUSTER GKE cluster\"\ngcloud container clusters get-credentials
          $CLUSTER --zone us-central1-c --project $PROJECT_ID\necho \"Kube config
          generated in $KUBECONFIG\"\n\necho \"Clone git repo: $4\"\ngit clone $4
          $5\n\necho \"Generate static inventory\"\n/etc/ansible/inventory.py --yaml
          --output /inventory\nmkdir -p $6\ncp -rf /inventory/* $6\n\nmkdir -p $(dirname
          $7)\ngcloud auth application-default print-access-token > $7\n\nDEVICES=(
          $(ansible --list-hosts all --limit $3 | awk ''NR>1'') )\nmkdir -p $(dirname
          $8)\necho \"${DEVICES[@]}\" > $8\n\n#echo \"Check reverse tunnels\"\n#TUNNELS_CREATED=()\n#for
          DEVICE in $DEVICES ; do\n#  TUNNEL_PORT=\"$(kubectl get device $DEVICE -o
          jsonpath=''{.spec.keys.data.tunnel}'' | base64 -d)\"\n#  RE=''^[0-9]+$''\n#  if
          ! [[ $TUNNEL_PORT =~ $RE ]] ; then\n#    echo \"Enabling reverse tunnel
          for: $DEVICE\"\n#    TUNNEL_PORT=\"$(( ( RANDOM % 64511 )  + 1024 ))\"\n#    TUNNEL_PORT_B64=$(echo
          -ne \"$TUNNEL_PORT\" | base64)\n#    kubectl patch device $DEVICE         #      --type
          merge         #      -p \"{\"spec\":{\"keys\":{\"data\":{\"tunnel\":\"$TUNNEL_PORT_B64\"}}}}\"\n#    TUNNELS_CREATED+=$DEVICE\n#  else\n#    echo
          \"Reverse tunnel already enabled for: $DEVICE\"\n#  fi\n#done\n\n#if ((
          ${#TUNNELS_CREATED[@]} )); then\n#    echo \"Wait 2 minutes for reverse
          tunnels to warm up\"\n#    sleep 2m\n#fi\n\nmkdir -p $(dirname $9)\necho
          \"${TUNNELS_CREATED[@]}\" > $9\n"], "image": "gcr.io/teknoir/edgebuild-kfp"}},
          "inputs": [{"name": "namespace", "type": "String"}, {"name": "project_id",
          "type": "String"}, {"name": "ansible_limit", "type": "String"}, {"name":
          "playbook_git_repo", "type": "String"}], "name": "Prepare", "outputs": [{"name":
          "kube_config", "type": "Data"}, {"name": "playbook_dir", "type": "Data"},
          {"name": "static_inventory", "type": "Data"}, {"name": "access_token", "type":
          "Data"}, {"name": "devices", "type": "Data"}, {"name": "tunnels_created",
          "type": "Data"}]}', pipelines.kubeflow.org/component_ref: '{"digest": "00d42285690916e4c1d4e529bea60327afb6f621b10dcdb31a2f5344c884b748"}',
        pipelines.kubeflow.org/arguments.parameters: '{"ansible_limit": "{{inputs.parameters.ansible_limit}}",
          "namespace": "teknoir-ai", "playbook_git_repo": "{{inputs.parameters.playbook_git_repo}}",
          "project_id": "teknoir"}', pipelines.kubeflow.org/max_cache_staleness: P0D}
  - name: run
    container:
      args: [teknoir-ai, teknoir, /tmp/inputs/kube_config/data, /tmp/inputs/playbook_dir/data,
        '{{inputs.parameters.playbook_path}}', '{{inputs.parameters.ansible_limit}}',
        /tmp/inputs/static_inventory/data, '{{inputs.parameters.prepare-access_token}}',
        /tmp/outputs/failed_devices/data, /tmp/outputs/successful_devices/data]
      command:
      - bash
      - -c
      - |
        set -eo pipefail
        export NAMESPACE=$0
        export PROJECT_ID=$1
        export KUBECONFIG=$2
        export ACCESS_TOKEN=$7

        echo "Access token: $ACCESS_TOKEN"

        mkdir -p /inventory
        cp -rf $6/* /inventory/

        cd $3
        echo "Run playbook: $4 on $5"
        ansible-playbook -v $4 --inventory /inventory/inventory.yaml --limit $5 || true

        mkdir -p $(dirname $8)
        cp failed_devices $8

        mkdir -p $(dirname $9)
        cp successful_devices $9
      image: gcr.io/teknoir/edgebuild-kfp
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: ansible_limit}
      - {name: playbook_path}
      - {name: prepare-access_token}
      artifacts:
      - {name: prepare-kube_config, path: /tmp/inputs/kube_config/data}
      - {name: prepare-playbook_dir, path: /tmp/inputs/playbook_dir/data}
      - {name: prepare-static_inventory, path: /tmp/inputs/static_inventory/data}
    outputs:
      artifacts:
      - {name: run-failed_devices, path: /tmp/outputs/failed_devices/data}
      - {name: run-successful_devices, path: /tmp/outputs/successful_devices/data}
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
        pipelines.kubeflow.org/component_spec: '{"description": "Runs the playbook",
          "implementation": {"container": {"args": [{"inputValue": "namespace"}, {"inputValue":
          "project_id"}, {"inputPath": "kube_config"}, {"inputPath": "playbook_dir"},
          {"inputValue": "playbook_path"}, {"inputValue": "ansible_limit"}, {"inputPath":
          "static_inventory"}, {"inputValue": "access_token"}, {"outputPath": "failed_devices"},
          {"outputPath": "successful_devices"}], "command": ["bash", "-c", "set -eo
          pipefail\nexport NAMESPACE=$0\nexport PROJECT_ID=$1\nexport KUBECONFIG=$2\nexport
          ACCESS_TOKEN=$7\n\necho \"Access token: $ACCESS_TOKEN\"\n\nmkdir -p /inventory\ncp
          -rf $6/* /inventory/\n\ncd $3\necho \"Run playbook: $4 on $5\"\nansible-playbook
          -v $4 --inventory /inventory/inventory.yaml --limit $5 || true\n\nmkdir
          -p $(dirname $8)\ncp failed_devices $8\n\nmkdir -p $(dirname $9)\ncp successful_devices
          $9\n"], "image": "gcr.io/teknoir/edgebuild-kfp"}}, "inputs": [{"name": "namespace",
          "type": "String"}, {"name": "project_id", "type": "String"}, {"name": "kube_config",
          "type": "Data"}, {"name": "playbook_path", "type": "String"}, {"name": "playbook_dir",
          "type": "Data"}, {"name": "ansible_limit", "type": "String"}, {"name": "static_inventory",
          "type": "Data"}, {"name": "access_token", "type": "Data"}], "name": "Run",
          "outputs": [{"name": "failed_devices", "type": "Data"}, {"name": "successful_devices",
          "type": "Data"}]}'
        pipelines.kubeflow.org/component_ref: '{"digest": "6c44a794b63d4d5108a86df3e28911d0344d022a89ff55a7f8de41ac74075013"}'
        pipelines.kubeflow.org/arguments.parameters: '{"access_token": "{{inputs.parameters.prepare-access_token}}",
          "ansible_limit": "{{inputs.parameters.ansible_limit}}", "namespace": "teknoir-ai",
          "playbook_path": "{{inputs.parameters.playbook_path}}", "project_id": "teknoir"}'
        pipelines.kubeflow.org/max_cache_staleness: P0D
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
  arguments:
    parameters:
    - {name: playbook_git_repo}
    - {name: playbook_path}
    - {name: ansible_limit}
    - {name: add_device_label, value: ''}
  serviceAccountName: pipeline-runner
  activeDeadlineSeconds: 86400
